#!/usr/bin/env bash

NOTIFICATION_ID_FILE="/tmp/tool_ctrl_notification_id"
APP_NAME="Tool Ctrl"
NOTIFICATION_URGENCY="low"

send_notification() {
	local title="$1"
	local message="$2"
	local value="$3"
	local hint=""

	if [[ -n "$value" ]]; then
		hint="--hint int:value:$value"
	fi

	if [[ -f "$NOTIFICATION_ID_FILE" ]]; then
		local replace_id=$(cat "$NOTIFICATION_ID_FILE")
		notify-send.py -u "$NOTIFICATION_URGENCY" -a "$APP_NAME" "$title" "$message" $hint -r "$replace_id"
	else
		notify-send.py -u "$NOTIFICATION_URGENCY" -a "$APP_NAME" "$title" "$message" $hint >"$NOTIFICATION_ID_FILE"
	fi
}

handle_keyboard_backlight() {
	local action="$1"
	local change=""

	case "$action" in
	up) change="+33%" ;;
	down) change="33%-" ;;
	*)
		echo "Invalid keyboard backlight action: $action"
		exit 1
		;;
	esac

	brightnessctl -d *::kbd_backlight set "$change"
	send_notification "Keyboard" "$action"
}

handle_volume() {
	local action="$1"

	case "$action" in
	up)
		pactl set-sink-volume @DEFAULT_SINK@ +5%
		local volume=$(pamixer --get-volume)
		send_notification "Volume" "Up ($volume%)" "$volume"
		;;
	down)
		pactl set-sink-volume @DEFAULT_SINK@ -5%
		local volume=$(pamixer --get-volume)
		send_notification "Volume" "Down ($volume%)" "$volume"
		;;
	mute)
		pactl set-sink-mute @DEFAULT_SINK@ toggle
		local status=$(pamixer --get-mute && echo "Muted" || echo "Unmuted")
		local volume=$(pamixer --get-volume)
		send_notification "Volume" "$status" "$volume"
		;;
	*)
		echo "Invalid volume action: $action"
		exit 1
		;;
	esac
}

# Function to handle microphone
handle_microphone() {
	local action="$1"

	case "$action" in
	mute)
		pactl set-source-mute @DEFAULT_SOURCE@ toggle
		local status=$(pamixer --get-mute --source 0 && echo "Muted" || echo "Unmuted")
		send_notification "Microphone" "$status"
		;;
	*)
		echo "Invalid microphone action: $action"
		exit 1
		;;
	esac
}

# Function to handle screen brightness
handle_brightness() {
	local action="$1"

	case "$action" in
	up)
		light -A 5
		local brightness=$(light | cut -d. -f1)
		send_notification "Brightness" "Up ($brightness%)" "$brightness"
		;;
	down)
		light -U 5
		local brightness=$(light | cut -d. -f1)
		send_notification "Brightness" "Down ($brightness%)" "$brightness"
		;;
	*)
		echo "Invalid brightness action: $action"
		exit 1
		;;
	esac
}

# Function to handle media controls
handle_media() {
	local action="$1"
	local script_dir=$(dirname "$0")

	case "$action" in
	toggle)
		playerctl play-pause
		"$script_dir/_tool_media_info"
		;;
	next)
		playerctl next
		"$script_dir/_tool_media_info"
		;;
	prev | previous)
		playerctl previous
		"$script_dir/_tool_media_info"
		;;

	ctrl)
		rofi
		;;
	*)
		echo "Invalid media action: $action"
		exit 1
		;;
	esac
}

# Main execution block
if [[ $# -lt 2 ]]; then
	echo "Usage: $0 <category> <action>"
	echo "Categories: key, vol, mic, light, media"
	exit 1
fi

category="$1"
action="$2"

case "$category" in
key) handle_keyboard_backlight "$action" ;;
vol) handle_volume "$action" ;;
mic) handle_microphone "$action" ;;
light) handle_brightness "$action" ;;
media) handle_media "$action" ;;
*)
	echo "Invalid category: $category"
	echo "Available categories: key, vol, mic, light, media"
	exit 1
	;;
esac

exit 0
